{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,kBACpCC,EAAYF,SAASC,cAAc,iBACnCE,EAAcH,SAASC,cAAc,mBAgC3C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CaN,SAASC,cAAc,UAE/Ba,iBAAiB,SAEnC,SAAoBC,GAClBA,EAAIC,iBAEJ,MAAMC,GAAclB,EAAWmB,MACzBC,GAAQjB,EAAUgB,MAClBE,GAAUjB,EAAYe,MAE5BnB,EAAWmB,MAAQ,GACnBhB,EAAUgB,MAAQ,GAClBf,EAAYe,MAAQ,GAEpB,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAIlCjB,EAHeiB,EAAI,EACPJ,EAAaI,EAAIF,GAG1BG,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBT,EAAA0B,OAAOC,QAAQ,uBAAqBnB,QAAiBC,OACnDmB,QAAMC,IAAI,uBAAqBrB,QAAiBC,MAAU,IAE7DqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBT,EAAA0B,OAAOK,QAAQ,sBAAoBvB,QAAiBC,OAClDmB,QAAMC,IAAI,sBAAoBrB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayInput = document.querySelector(\"[name='delay']\");\nconst stepInput = document.querySelector(\"[name='step']\");\nconst amountInput = document.querySelector(\"[name='amount']\");\nconst createPromisesBtn = document.querySelector('button');\n\ncreatePromisesBtn.addEventListener('click', onClickBtn);\n\nfunction onClickBtn(evt) {\n  evt.preventDefault();\n\n  const delayFirst = +delayInput.value;\n  const step = +stepInput.value;\n  const amount = +amountInput.value;\n\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n\n  for (let i = 0; i < amount; i += 1) {\n    let position = i + 1;\n    let delay = delayFirst + i * step;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$delayInput","document","querySelector","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delayFirst","value","step","amount","i","then","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.0e057b11.js.map"}